version: '3.8'

services:
  # Zookeeper (requerido para Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI (Kafdrop)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

  # Service Customer
  service-customer:
    build:
      context: .
      dockerfile: apps/service-customer/Dockerfile
    container_name: service-customer
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      KAFKA_BROKERS: kafka:29092
    volumes:
      - ./apps/service-customer:/app
      - /app/node_modules
    restart: unless-stopped

  # Service Profiling
  service-profiling:
    build:
      context: .
      dockerfile: apps/service-profiling/Dockerfile
    container_name: service-profiling
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      KAFKA_BROKERS: kafka:29092
    volumes:
      - ./apps/service-profiling:/app
      - /app/node_modules
    restart: unless-stopped

  # Service Notifications
  service-notifications:
    build:
      context: .
      dockerfile: apps/service-notifications/Dockerfile
    container_name: service-notifications
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      KAFKA_BROKERS: kafka:29092
    volumes:
      - ./apps/service-notifications:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data: 